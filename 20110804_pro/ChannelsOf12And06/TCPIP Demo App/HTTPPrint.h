/**************************************************************
 * HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 **************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_CONN curHTTP;
extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_YR(void);
void HTTPPrint_MH(void);
void HTTPPrint_DA(void);
void HTTPPrint_HR(void);
void HTTPPrint_ME(void);
void HTTPPrint_TP(void);
void HTTPPrint_STATUE(void);
void HTTPPrint_HI(void);
void HTTPPrint_ShareOn(void);
void HTTPPrint_ShareOff(void);
void HTTPPrint_ShareOut(void);
void HTTPPrint_showV(void);
void HTTPPrint_showA(void);
void HTTPPrint_showA1(void);
void HTTPPrint_showA2(void);
void HTTPPrint_showA3(void);
void HTTPPrint_showA4(void);
void HTTPPrint_showA5(void);
void HTTPPrint_showA6(void);
void HTTPPrint_showA7(void);
void HTTPPrint_showA8(void);
void HTTPPrint_showA9(void);
void HTTPPrint_showA10(void);
void HTTPPrint_showA11(void);
void HTTPPrint_showA12(void);
void HTTPPrint_REPLAY_ON_OFF(void);
void HTTPPrint_PDU_Model(void);
void HTTPPrint_Control_status(void);
void HTTPPrint_ERRORNO(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000028:
			HTTPPrint_config_ip();
			break;
        case 0x00000029:
			HTTPPrint_config_gw();
			break;
        case 0x0000002a:
			HTTPPrint_config_subnet();
			break;
        case 0x00000032:
			HTTPPrint_YR();
			break;
        case 0x00000033:
			HTTPPrint_MH();
			break;
        case 0x00000034:
			HTTPPrint_DA();
			break;
        case 0x00000035:
			HTTPPrint_HR();
			break;
        case 0x00000036:
			HTTPPrint_ME();
			break;
        case 0x00000038:
			HTTPPrint_TP();
			break;
        case 0x00000069:
			HTTPPrint_STATUE();
			break;
        case 0x0000006c:
			HTTPPrint_HI();
			break;
        case 0x0000006d:
			HTTPPrint_ShareOn();
			break;
        case 0x0000006e:
			HTTPPrint_ShareOff();
			break;
        case 0x0000006f:
			HTTPPrint_ShareOut();
			break;
        case 0x00000070:
			HTTPPrint_showV();
			break;
        case 0x00000071:
			HTTPPrint_showA();
			break;
        case 0x00000072:
			HTTPPrint_showA1();
			break;
        case 0x00000073:
			HTTPPrint_showA2();
			break;
        case 0x00000074:
			HTTPPrint_showA3();
			break;
        case 0x00000075:
			HTTPPrint_showA4();
			break;
        case 0x00000076:
			HTTPPrint_showA5();
			break;
        case 0x00000077:
			HTTPPrint_showA6();
			break;
        case 0x00000078:
			HTTPPrint_showA7();
			break;
        case 0x00000079:
			HTTPPrint_showA8();
			break;
        case 0x0000007a:
			HTTPPrint_showA9();
			break;
        case 0x0000007b:
			HTTPPrint_showA10();
			break;
        case 0x0000007c:
			HTTPPrint_showA11();
			break;
        case 0x0000007d:
			HTTPPrint_showA12();
			break;
        case 0x0000007e:
			HTTPPrint_REPLAY_ON_OFF();
			break;
        case 0x0000007f:
			HTTPPrint_PDU_Model();
			break;
        case 0x00000080:
			HTTPPrint_Control_status();
			break;
        case 0x00000081:
			HTTPPrint_ERRORNO();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
